{"ast":null,"code":"import _regeneratorRuntime from\"/home/ismael/Documents/Projects/GIT/CryptoKitties-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/ismael/Documents/Projects/GIT/CryptoKitties-clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import Web3 from\"web3\";var getWeb3=function getWeb3(){return new Promise(function(resolve,reject){// Wait for loading completion to avoid race conditions with web3 injection timing.\nwindow.addEventListener(\"load\",/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var web3,_web,provider,_web2;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!window.ethereum){_context.next=13;break;}web3=new Web3(window.ethereum);_context.prev=2;_context.next=5;return window.ethereum.enable();case 5:// Acccounts now exposed\nresolve(web3);_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](2);reject(_context.t0);case 11:_context.next=14;break;case 13:// Legacy dapp browsers...\nif(window.web3){// Use Mist/MetaMask's provider.\n_web=window.web3;console.log(\"Injected web3 detected.\");resolve(_web);}// Fallback to localhost; use dev console port by default...\nelse{provider=new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");_web2=new Web3(provider);console.log(\"No web3 instance injected, using Local web3.\");resolve(_web2);}case 14:case\"end\":return _context.stop();}}},_callee,null,[[2,8]]);})));});};export default getWeb3;","map":{"version":3,"sources":["/home/ismael/Documents/Projects/GIT/CryptoKitties-clone/client/src/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","console","log","provider","providers","HttpProvider"],"mappings":"uWAAA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,SACd,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CAC/B;AACAC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,sEAAgC,oKAE1BD,MAAM,CAACE,QAFmB,0BAGtBC,IAHsB,CAGf,GAAIR,CAAAA,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAHe,uCAMpBF,CAAAA,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EANoB,QAO1B;AACAN,OAAO,CAACK,IAAD,CAAP,CAR0B,+EAU1BJ,MAAM,aAAN,CAV0B,uCAa9B;AACK,GAAIC,MAAM,CAACG,IAAX,CAAiB,CACpB;AACMA,IAFc,CAEPH,MAAM,CAACG,IAFA,CAGpBE,OAAO,CAACC,GAAR,CAAY,yBAAZ,EACAR,OAAO,CAACK,IAAD,CAAP,CACD,CACD;AANK,IAOA,CACGI,QADH,CACc,GAAIZ,CAAAA,IAAI,CAACa,SAAL,CAAeC,YAAnB,CACf,uBADe,CADd,CAIGN,KAJH,CAIU,GAAIR,CAAAA,IAAJ,CAASY,QAAT,CAJV,CAKHF,OAAO,CAACC,GAAR,CAAY,8CAAZ,EACAR,OAAO,CAACK,KAAD,CAAP,CACD,CA5B6B,oEAAhC,IA8BD,CAhCD,CADc,EAAhB,CAmCA,cAAeP,CAAAA,OAAf","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}