{"ast":null,"code":"var _jsxFileName = \"/home/ismael/Documents/Projects/GIT/CryptoKitties-clone/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport PandaContract from \"./contracts/PandaContract.json\";\nimport PandaProxy from \"./contracts/PandaProxy.json\";\nimport PandaMarketPlaceContract from \"./contracts/PandaMarketPlace.json\";\nimport PandaMarketPlaceProxy from \"./contracts/PandaMarketPlaceProxy.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\nimport Footer from \"./components/Footer\";\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      marketContract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = PandaProxy.networks[networkId];\n        const instance = new web3.eth.Contract(PandaContract.abi, deployedNetwork && deployedNetwork.address);\n        const marketDeployedNetwork = PandaMarketPlaceProxy.networks[networkId];\n        const marketInstance = new web3.eth.Contract(PandaMarketPlaceContract.abi, marketDeployedNetwork && marketDeployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance,\n          marketContract: marketInstance\n        }, this.runExample); // Handle page reload on Network or user account changes\n\n        window.ethereum.on('chainChanged', chainId => {\n          document.location.reload();\n        });\n        window.ethereum.on('accountsChanged', () => {\n          document.location.reload();\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 14\n        }\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      contract: this.state.contract,\n      accounts: this.state.accounts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Body, {\n      contract: this.state.contract,\n      accounts: this.state.accounts,\n      marketContract: this.state.marketContract,\n      web3: this.state.web3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ismael/Documents/Projects/GIT/CryptoKitties-clone/client/src/App.js"],"names":["React","Component","PandaContract","PandaProxy","PandaMarketPlaceContract","PandaMarketPlaceProxy","getWeb3","Header","Body","Footer","BrowserRouter","Router","App","state","storageValue","web3","accounts","contract","marketContract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","marketDeployedNetwork","marketInstance","setState","runExample","window","ethereum","on","chainId","document","location","reload","error","alert","console","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PandaContract from \"./contracts/PandaContract.json\";\nimport PandaProxy from \"./contracts/PandaProxy.json\";\nimport PandaMarketPlaceContract from \"./contracts/PandaMarketPlace.json\";\nimport PandaMarketPlaceProxy from \"./contracts/PandaMarketPlaceProxy.json\";\n\nimport getWeb3 from \"./getWeb3\";\n\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\nimport Footer from \"./components/Footer\";\n\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nimport \"./App.css\";\n\n\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    marketContract:null,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = PandaProxy.networks[networkId];\n      const instance = new web3.eth.Contract(\n        PandaContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      const marketDeployedNetwork = PandaMarketPlaceProxy.networks[networkId];\n      const marketInstance = new web3.eth.Contract(\n        PandaMarketPlaceContract.abi,\n        marketDeployedNetwork && marketDeployedNetwork.address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance , marketContract: marketInstance }, this.runExample);\n\n      // Handle page reload on Network or user account changes\n      window.ethereum.on('chainChanged', chainId => {\n        document.location.reload()\n      })\n      window.ethereum.on('accountsChanged', () => {\n        document.location.reload()\n      })\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header contract ={this.state.contract} accounts={this.state.accounts}/>\n          <Body contract ={this.state.contract} accounts={this.state.accounts} marketContract = {this.state.marketContract} web3 = {this.state.web3}/>\n          <Footer/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}