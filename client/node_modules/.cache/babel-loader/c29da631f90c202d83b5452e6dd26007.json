{"ast":null,"code":"export const genesToDNA = gene => {\n  let dna = {\n    dnaarmleg: parseInt(gene.slice(0, 2)),\n    dnaeyepatch: parseInt(gene.slice(2, 4)),\n    dnainnerearfoot: parseInt(gene.slice(4, 6)),\n    dnaheadbody: parseInt(gene.slice(6, 8)),\n    //Pandatributes\n    dnaeyeshape: parseInt(gene.slice(8, 9)),\n    dnamouthshape: parseInt(gene.slice(9, 10)),\n    decorationMidcolor: parseInt(gene.slice(10, 12)),\n    decorationSidescolor: parseInt(gene.slice(12, 14)),\n    animation: parseInt(gene.slice(14, 15)),\n    lastNum: parseInt(gene.slice(15, 16))\n  };\n  return dna;\n};\nexport const epochToUTCDate = epochTime => {\n  let date = new Date(epochTime * 1000);\n  return date.toUTCString();\n};\nexport const getPanda = async (contract, accounts, tokenId) => {\n  let _pandaItem, _panda;\n\n  _panda = await contract.methods.getPanda(tokenId).call({\n    from: accounts[0]\n  });\n  _pandaItem = {\n    pandaTokenId: parseInt(tokenId),\n    mumId: parseInt(_panda.mumId),\n    dadId: parseInt(_panda.dadId),\n    birthTime: parseInt(_panda.birthTime),\n    generation: parseInt(_panda.generation),\n    genes: parseInt(_panda.genes),\n    dna: genesToDNA(_panda.genes)\n  };\n  return _pandaItem;\n};\nexport const getPandas = async (contract, accounts) => {\n  let _pandaList = [];\n\n  let _pandaItem;\n\n  const PandaTokenIdArray = await contract.methods._pandasOfOwner(accounts[0]).call({\n    from: accounts[0]\n  });\n\n  for (let i = 0; i < PandaTokenIdArray.length; i++) {\n    _pandaItem = await getPanda(contract, accounts, parseInt(PandaTokenIdArray[i]));\n\n    _pandaList.push(_pandaItem);\n  }\n\n  return _pandaList;\n};\nexport const createPandaGen0 = (contract, accounts, dna) => {\n  contract.methods.createPandaGen0(dna).send({\n    from: accounts[0]\n  }, (error, txHash) => {\n    if (error) {\n      console.log(error);\n    }\n  });\n};\nexport const breed = (contract, accounts, mumTokenId, dadTokenId) => {\n  contract.methods.breed(mumTokenId, dadTokenId).send({\n    from: accounts[0]\n  }, (error, txHash) => {\n    if (error) {\n      console.log(error);\n    }\n  });\n};\nexport const getMarketOffers = async (pandaContract, marketContract, accounts) => {\n  let _marketOfferList = [];\n\n  let _marketOfferItem;\n\n  let marketOffersArray = await marketContract.methods.getAllTokenOnSale().call({\n    from: accounts[0]\n  });\n\n  for (let i = 0; i < marketOffersArray.length; i++) {\n    let _offer = await marketContract.methods.getOffer(marketOffersArray[i]).call({\n      from: accounts[0]\n    });\n\n    let _panda = await pandaContract.methods.getPanda(_offer.tokenId).call({\n      from: accounts[0]\n    });\n\n    _marketOfferItem = {\n      seller: _offer.seller,\n      price: parseInt(_offer.price),\n      index: _offer.index,\n      tokenId: parseInt(_offer.tokenId),\n      active: _offer.active,\n      mumId: parseInt(_panda.mumId),\n      dadId: parseInt(_panda.dadId),\n      birthTime: parseInt(_panda.birthTime),\n      generation: parseInt(_panda.generation),\n      genes: parseInt(_panda.genes),\n      dna: genesToDNA(_panda.genes)\n    };\n\n    if (_marketOfferItem.active === true) {\n      _marketOfferList.push(_marketOfferItem);\n    }\n  }\n\n  return _marketOfferList;\n};\nexport const setApprovalForAll = async (contract, marketContract, accounts, approvalFlag) => {\n  try {\n    await contract.methods.setApprovalForAll(marketContract.options.address, approvalFlag).send({\n      from: accounts[0]\n    });\n  } catch (e) {\n    console.log(\"Error when setting approval\", e);\n  }\n};\nexport const setOffer = async (marketContract, accounts, price, tokenId) => {\n  await marketContract.methods.setOffer(price, tokenId).send({\n    from: accounts[0]\n  }, error => {\n    if (error) {\n      console.log(error);\n    }\n  });\n};\nexport const removeOffer = async (marketContract, accounts, tokenId) => {\n  await marketContract.methods.removeOffer(tokenId).send({\n    from: accounts[0]\n  }, error => {\n    if (error) {\n      console.log(error);\n    }\n  });\n};\nexport const getActiveOfferCount = async (marketContract, accounts) => {\n  let numberOfOffers = await marketContract.methods.getActiveOfferCount().call({\n    from: accounts[0]\n  });\n  return numberOfOffers;\n};\nexport const getOffer = async (marketContract, accounts, tokenId) => {\n  let _offer, _offerItem;\n\n  _offer = await marketContract.methods.getOffer(tokenId).call({\n    from: accounts[0]\n  });\n  _offerItem = {\n    seller: _offer.seller,\n    price: parseInt(_offer.price),\n    index: parseInt(_offer.index),\n    tokenId: parseInt(_offer.tokenId),\n    active: _offer.active\n  };\n  return _offerItem;\n};\nexport const buyPanda = async (marketContract, accounts, tokenId, value) => {\n  await marketContract.methods.buyPanda(tokenId).send({\n    from: accounts[0],\n    value: value\n  });\n};\nexport const getTotalSupply = async (contract, accounts) => {\n  let _totalSupply;\n\n  _totalSupply = await contract.methods.totalSupply().call({\n    from: accounts[0]\n  });\n  return _totalSupply;\n};","map":{"version":3,"sources":["/home/ismael/Documents/Projects/GIT/CryptoKitties-clone/client/src/assets/js/utils.js"],"names":["genesToDNA","gene","dna","dnaarmleg","parseInt","slice","dnaeyepatch","dnainnerearfoot","dnaheadbody","dnaeyeshape","dnamouthshape","decorationMidcolor","decorationSidescolor","animation","lastNum","epochToUTCDate","epochTime","date","Date","toUTCString","getPanda","contract","accounts","tokenId","_pandaItem","_panda","methods","call","from","pandaTokenId","mumId","dadId","birthTime","generation","genes","getPandas","_pandaList","PandaTokenIdArray","_pandasOfOwner","i","length","push","createPandaGen0","send","error","txHash","console","log","breed","mumTokenId","dadTokenId","getMarketOffers","pandaContract","marketContract","_marketOfferList","_marketOfferItem","marketOffersArray","getAllTokenOnSale","_offer","getOffer","seller","price","index","active","setApprovalForAll","approvalFlag","options","address","e","setOffer","removeOffer","getActiveOfferCount","numberOfOffers","_offerItem","buyPanda","value","getTotalSupply","_totalSupply","totalSupply"],"mappings":"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","sourcesContent":["export const  genesToDNA=(gene)=> {\n    let dna = {\n        dnaarmleg: parseInt(gene.slice(0,2)),\n        dnaeyepatch: parseInt(gene.slice(2,4)),\n        dnainnerearfoot: parseInt(gene.slice(4,6)),\n        dnaheadbody: parseInt(gene.slice(6,8)),\n        //Pandatributes\n        dnaeyeshape: parseInt(gene.slice(8,9)),\n        dnamouthshape: parseInt(gene.slice(9,10)),\n        decorationMidcolor: parseInt(gene.slice(10,12)),\n        decorationSidescolor: parseInt(gene.slice(12,14)),\n        animation: parseInt(gene.slice(14,15)),\n        lastNum: parseInt(gene.slice(15,16)),\n    }\n    return dna;\n}\n\nexport const  epochToUTCDate=(epochTime)=> {\n    \n    let date = new Date(epochTime*1000);\n    return date.toUTCString();\n}\n\nexport  const getPanda = async (contract, accounts, tokenId) => {\n  let _pandaItem, _panda;\n\n  _panda = await contract.methods\n    .getPanda(tokenId)\n    .call({ from: accounts[0] });\n\n  _pandaItem = {\n    pandaTokenId: parseInt(tokenId),\n    mumId: parseInt(_panda.mumId),\n    dadId: parseInt(_panda.dadId),\n    birthTime: parseInt(_panda.birthTime),\n    generation: parseInt(_panda.generation),\n    genes: parseInt(_panda.genes),\n    dna: genesToDNA(_panda.genes),\n  };\n\n  return _pandaItem;\n}\n\nexport  const getPandas = async (contract, accounts) => {\n    let _pandaList = [];\n    let _pandaItem;\n\n    \n    const PandaTokenIdArray = await contract.methods\n      ._pandasOfOwner(accounts[0])\n      .call({ from: accounts[0] }); \n\n    for (let i = 0; i < PandaTokenIdArray.length; i++) {\n      _pandaItem = await getPanda(contract, accounts, parseInt(PandaTokenIdArray[i]));\n      _pandaList.push(_pandaItem);\n    }\n\n    return _pandaList;\n};\n\nexport const createPandaGen0 = (contract,accounts,dna) =>{\n  contract.methods\n  .createPandaGen0(dna)\n  .send({ from: accounts[0] }, (error, txHash) => {\n    if (error) {\n      console.log(error);\n    } \n  })\n};  \n\nexport const breed = (contract,accounts,mumTokenId, dadTokenId) =>{\n  contract.methods.breed(mumTokenId,dadTokenId)\n      .send({ from: accounts[0] }, (error, txHash) => {\n        if (error) {\n          console.log(error);\n        }\n      });\n};\n\nexport  const getMarketOffers = async (pandaContract,marketContract, accounts) => {\n  let _marketOfferList = [];\n  let _marketOfferItem;\n\n  let marketOffersArray = await marketContract.methods\n    .getAllTokenOnSale()\n    .call({ from: accounts[0] });\n\n  for (let i =0; i < marketOffersArray.length; i++) {\n    let _offer = await marketContract.methods\n      .getOffer(marketOffersArray[i])\n      .call({ from: accounts[0] });\n\n    let _panda = await pandaContract.methods\n      .getPanda(_offer.tokenId)\n      .call({ from: accounts[0] });\n\n      _marketOfferItem = {\n        seller:_offer.seller,\n        price:parseInt(_offer.price),\n        index:_offer.index,\n        tokenId:parseInt(_offer.tokenId),\n        active:_offer.active,    \n        mumId: parseInt(_panda.mumId),\n        dadId: parseInt(_panda.dadId),\n        birthTime: parseInt(_panda.birthTime),\n        generation: parseInt(_panda.generation),\n        genes: parseInt(_panda.genes),\n        dna: genesToDNA(_panda.genes),\n      };\n      if(_marketOfferItem.active===true){\n        _marketOfferList.push(_marketOfferItem);\n      }\n  }\n  return _marketOfferList;\n};\n\nexport const setApprovalForAll = async (contract,marketContract,accounts,approvalFlag) =>{\n  try{\n    \n    await contract.methods.setApprovalForAll(marketContract.options.address,approvalFlag)\n      .send({ from: accounts[0]});\n  }\n  catch(e){\n    console.log(\"Error when setting approval\",e);\n  }\n};\n\nexport const setOffer = async (marketContract,accounts,price,tokenId) =>{\n  await marketContract.methods.setOffer(price,tokenId)\n      .send({ from: accounts[0] }, (error) => {\n\n        if (error) {\n          console.log(error);\n        } \n      });\n};\n\nexport const removeOffer = async (marketContract,accounts,tokenId) =>{\n  await marketContract.methods.removeOffer(tokenId)\n      .send({ from: accounts[0] }, (error) => {\n        if (error) {\n          console.log(error);\n        } \n      });\n};\n\nexport const getActiveOfferCount = async (marketContract,accounts) =>{\n  let numberOfOffers = await marketContract.methods.getActiveOfferCount()\n      .call({ from: accounts[0] });\n  return numberOfOffers;\n};\n\nexport  const getOffer = async (marketContract, accounts, tokenId) => {\n  let _offer,_offerItem;\n\n  _offer = await marketContract.methods\n    .getOffer(tokenId)\n    .call({ from: accounts[0] });\n\n  _offerItem = {\n      seller : _offer.seller,\n      price  : parseInt(_offer.price),\n      index  : parseInt(_offer.index),\n      tokenId: parseInt(_offer.tokenId),\n      active : _offer.active,\n  };\n\n  return _offerItem;\n}\n\nexport const buyPanda = async (marketContract,accounts,tokenId,value)=>{\n  await marketContract.methods.buyPanda(tokenId).send({ from: accounts[0] ,value: value});\n}\n\nexport  const getTotalSupply = async (contract, accounts) => {\n  let _totalSupply;\n\n  _totalSupply = await contract.methods.totalSupply().call({ from: accounts[0] });\n\n  return _totalSupply;\n}"]},"metadata":{},"sourceType":"module"}